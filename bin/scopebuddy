#!/usr/bin/env bash
# Special thanks to @coolavery for the initial script for this
# https://github.com/ValveSoftware/gamescope/issues/835#issuecomment-2496383830
#
# Initial 1.0.0 version was not possible without the help of
# * @coolavery
# * @HikariKnight
# * @Zeglius
# * @tulilirockz
# * @EPOCHvoyager
# * @wolfyreload
#
# Purpose of this script:
# * Allow launching gamescope with a default set of environment variables and gamescope args set by the user
#   "~/.config/scopebuddy/scb.conf" will be created with examples after first run
# * Serve as a temporary workaround for fixing the steam overlay when using nested gamescope on desktop steam until fixed upstream
set -eo pipefail

##########
# Globals
##########

SCB_VER="1.1.1"

gamescope_opts=""
command=""

# Set SCB to use gamescope by default
SCB_NOSCOPE=${SCB_NOSCOPE:-0}

# Set default gamescope binary
GAMESCOPE_BIN=${GAMESCOPE_BIN:-gamescope}

# Configure SCB config
SCB_CONF=${SCB_CONF:-"scb.conf"}
SCB_CONFIGDIR="$HOME/.config/scopebuddy"

# By default we will never be in gamemode
SCB_GAMEMODE=0

# Default off for SCB_DEBUG
SCB_DEBUG=${SCB_DEBUG:-0}

# Default off for SCB_AUTO_*
SCB_AUTO_RES=${SCB_AUTO_RES:-0}
SCB_AUTO_HDR=${SCB_AUTO_HDR:-0}
SCB_AUTO_VRR=${SCB_AUTO_VRR:-0}

###################
# Helper functions
###################

# Appends a substring to $gamescope_apts if it doesn't already exist
# Usage:
#    gamescope_opts=$(verify_or_append_arg "$gamescope_opts" "<TARGET>")
# Params:
#    $1: (Required) original $gamescope_opts argument string, ex: "-H 1920 -W 1080 --mangoapp" 
#    $2: (Required) target substring. Ex: "--hdr-enabled"). If not found, it will be appended. 
verify_or_append_arg() {
    local argstring="$1"
    local target="$2"
    # append if the value doesn't exist.
    if ! echo "$argstring" | grep -F -q -- "$target"; then
        argstring="$argstring $target"
    fi
    echo "$argstring"
}
# Uses sed to replace a target string if it exists, or append it to the args if it doesn't.
# Usage:
#    gamescope_opts=$(replace_or_append_arg "$gamescope_opts" "<TARGET>" "<REPLACEMENT>")
# Params:
#    $1: (Required) original $gamescope_opts argument string, ex: "-H 1920 -W 1080 --mangoapp" 
#    $2: (Required) target substring. sed extended regex format, ex: "-H[[:space:]]*[0-9]+" (matches strings like "-H 1920") 
#    $3: (Required) replacement substring. Ex: "-H 3440". If $target is not found, this value will be appended.
replace_or_append_arg() {
    local argstring="$1"
    local target="$2"
    local replacement="$3"
    if echo "$argstring" | grep -E -q -- "$target"; then
        # Replace all occurrences of the target with the replacement.
        argstring=$(echo "$argstring" | sed -E "s/${target}/${replacement}/g")
    else
        # Append the replacement value if the target is not found in the original argstring.
        argstring="$argstring $replacement"
    fi
    echo "$argstring"
}
# Detects the current desktop environment
# Returns "kde", "gnome", "xrandr", or "unknown"
detect_desktop_environment() {
    if [ -n "$KDE_FULL_SESSION" ]; then
        echo "kde"
    elif [ "$XDG_CURRENT_DESKTOP" = "GNOME" ] || [ "$DESKTOP_SESSION" = "gnome" ]; then
        echo "gnome"
    elif command -v xrandr >/dev/null 2>&1; then
        echo "xrandr"
    else
        echo "unknown"
    fi
}

# Validates capability to run $SCB_AUTO_* on KDE
# Returns 0 and logs if any dependency is missing.
kde_auto_args_preflight() {
    local missing=""
    # Check for KDE session
    if [ -z "$KDE_FULL_SESSION" ]; then
        missing+="KDE_FULL_SESSION not set; "
    fi
    # Check that jq is available
    if ! command -v jq >/dev/null 2>&1; then
        missing+="jq not available; "
    fi
    # Check that kscreen-doctor is available
    if ! command -v kscreen-doctor >/dev/null 2>&1; then
        missing+="kscreen-doctor not available; "
    fi
    if [ -n "$missing" ]; then
        echo "An SCB_AUTO_* argument was passed (auto res, auto hdr, auto vrr) but the following dependencies failed: $missing"
        return 1
    fi
    return 0
}

# Validates capability to run $SCB_AUTO_* on any desktop with xrandr
# Returns 0 and logs if any dependency is missing.
xrandr_auto_args_preflight() {
    local missing=""
    # Check that jq is available
    if ! command -v jq >/dev/null 2>&1; then
        missing+="jq not available; "
    fi
    # Check that xrandr is available
    if ! command -v xrandr >/dev/null 2>&1; then
        missing+="xrandr not available; "
    fi
    if [ -n "$missing" ]; then
        echo "An SCB_AUTO_* argument was passed (auto res, auto hdr, auto vrr) but the following dependencies failed: $missing"
        return 1
    fi
    return 0
}

# Generic auto args preflight that works for KDE, GNOME, and any xrandr-capable desktop
auto_args_preflight() {
    local desktop_env=$(detect_desktop_environment)
    case "$desktop_env" in
        "kde")
            kde_auto_args_preflight
            ;;
        "gnome"|"xrandr")
            xrandr_auto_args_preflight
            ;;
        *)
            echo "SCB_AUTO_* features require either KDE (with kscreen-doctor) or xrandr support"
            return 1
            ;;
    esac
}
# Gets the user's primary display via kscreen-doctor.
# Returns a single kscreen JSON object for the display obj.
kde_get_primary_display() {
    # we want to respect user settings for -O or --prefer-output.
    # if so, jsut get that by name.
    local prefer="$1"
    if [ -n "$prefer" ]; then
        # Try to select the output by its exact name
        kscreen-doctor -j | jq -c --arg prefer "$prefer" '
            .outputs | map(select(.name == $prefer)) | if length > 0 then .[0] else empty end
        '
    else
        # if multidisplay, sort to get the "primary". KDE's settings panel
        # has boolean style "primary" toggle, but kscreen uses a "priority" int value.
        # If there's only one, we just get the first one.
        kscreen-doctor -j | jq -c '
            if (.outputs | length) == 1 then
                .outputs[0]
            else
                (.outputs | map(select(.enabled == true)) | sort_by(.priority))[0]
            end
        '
    fi
}
# Selectively extracts mode info from kscreen doctor for use with SCB_AUTO_*.
# More fields are available on the mode, the jq selection can be updated if more
# fields are needed later.
kde_get_mode_info() {
    local prefer="$1"
    # Ensure we're getting the enabled mode for the primary display or the -o/--prefer-output value
    mode_id=$(kde_get_primary_display "$prefer"| jq -r '.currentModeId')
    kde_get_primary_display | jq -r --arg mode_id "$mode_id" '
        .modes[] | select(.id == $mode_id) | {width: .size.width, height: .size.height, refresh: .refreshRate}
    '
}

# Gets the user's primary display info using xrandr
# Returns a JSON object for the primary display.
xrandr_get_primary_display() {
    local prefer="$1"
    
    local xrandr_output
    xrandr_output=$(xrandr 2>/dev/null) || {
        echo "Error: Failed to get display information from xrandr" >&2
        return 1
    }
    
    if [ -z "$xrandr_output" ]; then
        echo "Error: xrandr returned no output" >&2
        return 1
    fi
    
    local result
    if [ -n "$prefer" ]; then
        # Look for specific output
        result=$(echo "$xrandr_output" | awk -v output="$prefer" '
        $1 == output && /connected/ {
            # Extract resolution from the current line
            resolution = ""
            primary = ($3 == "primary" ? "true" : "false")
            if (match($0, /([0-9]+)x([0-9]+)/, res_arr)) {
                resolution = res_arr[1] "x" res_arr[2]
                width = res_arr[1]
                height = res_arr[2]
            }
            # Look for refresh rate in next line with *+ or *
            getline nextline
            refresh = "60.0"
            if (match(nextline, /([0-9]+\.[0-9]+)\*/, ref_arr)) {
                refresh = ref_arr[1]
            }
            if (width && height) {
                printf "{\"name\":\"%s\",\"width\":%s,\"height\":%s,\"refresh\":%s,\"primary\":%s}\n", 
                       output, width, height, refresh, primary
            }
        }')
    else
        # Look for primary output, fallback to first connected
        result=$(echo "$xrandr_output" | awk '
        /connected/ {
            name = $1
            primary = ($3 == "primary" ? "true" : "false")
            # Extract resolution from the current line
            width = ""
            height = ""
            if (match($0, /([0-9]+)x([0-9]+)/, res_arr)) {
                width = res_arr[1]
                height = res_arr[2]
            }
            
            # Store first connected display info
            if (!found_any) {
                first_name = name
                first_width = width
                first_height = height
                first_primary = primary
                found_any = 1
            }
            
            # Store primary display info if found
            if (primary == "true") {
                primary_name = name
                primary_width = width
                primary_height = height
                primary_primary = primary
                found_primary = 1
                
                # Look for refresh rate in next line
                getline nextline
                refresh = "60.0"
                if (match(nextline, /([0-9]+\.[0-9]+)\*/, ref_arr)) {
                    refresh = ref_arr[1]
                }
                primary_refresh = refresh
            } else if (!found_primary && found_any == 1) {
                # Get refresh rate for first display if no primary found yet
                getline nextline
                refresh = "60.0"
                if (match(nextline, /([0-9]+\.[0-9]+)\*/, ref_arr)) {
                    refresh = ref_arr[1]
                }
                first_refresh = refresh
            }
        }
        END {
            if (found_primary) {
                printf "{\"name\":\"%s\",\"width\":%s,\"height\":%s,\"refresh\":%s,\"primary\":%s}\n", 
                       primary_name, primary_width, primary_height, primary_refresh, primary_primary
            } else if (found_any) {
                printf "{\"name\":\"%s\",\"width\":%s,\"height\":%s,\"refresh\":%s,\"primary\":%s}\n", 
                       first_name, first_width, first_height, (first_refresh ? first_refresh : "60.0"), first_primary
            } else {
                print "{}"
            }
        }')
    fi
    
    if [ -z "$result" ] || [ "$result" = "{}" ]; then
        echo "Error: Could not find display information" >&2
        return 1
    fi
    
    echo "$result"
}

# Gets mode info using xrandr
xrandr_get_mode_info() {
    local prefer="$1"
    local display_info
    display_info=$(xrandr_get_primary_display "$prefer") || return 1
    echo "$display_info" | jq -c 'if .width then {width: .width, height: .height, refresh: .refresh} else {} end'
}

# Generic function to get HDR status that works for KDE, GNOME, and xrandr-capable desktops
get_hdr_status() {
    local prefer="$1"
    local desktop_env=$(detect_desktop_environment)
    case "$desktop_env" in
        "kde")
            kde_get_primary_display "$prefer" | jq -r '.hdr'
            ;;
        "gnome")
            # Check if HDR is enabled via gsettings for GNOME
            local hdr_enabled="false"
            if command -v gsettings >/dev/null 2>&1; then
                if gsettings list-keys org.gnome.mutter 2>/dev/null | grep -q experimental-features; then
                    if gsettings get org.gnome.mutter experimental-features 2>/dev/null | grep -q hdr; then
                        hdr_enabled="true"
                    fi
                fi
            fi
            echo "$hdr_enabled"
            ;;
        "xrandr")
            # For generic xrandr, we cannot reliably detect HDR status
            echo "false"
            ;;
        *)
            echo "false"
            ;;
    esac
}

# Generic function to get VRR status that works for KDE, GNOME, and xrandr-capable desktops
get_vrr_status() {
    local prefer="$1"
    local desktop_env=$(detect_desktop_environment)
    case "$desktop_env" in
        "kde")
            kde_get_primary_display "$prefer" | jq -r '.vrrPolicy'
            ;;
        "gnome")
            # Check if VRR is enabled via gsettings for GNOME
            local vrr_enabled="false"
            if command -v gsettings >/dev/null 2>&1; then
                if gsettings list-keys org.gnome.mutter 2>/dev/null | grep -q experimental-features; then
                    if gsettings get org.gnome.mutter experimental-features 2>/dev/null | grep -q variable-refresh-rate; then
                        vrr_enabled="true"
                    fi
                fi
            fi
            echo "$vrr_enabled"
            ;;
        "xrandr")
            # For generic xrandr, we cannot reliably detect VRR status
            echo "0"
            ;;
        *)
            echo "0"
            ;;
    esac
}


# Generic function to get mode info that works for KDE, GNOME, and xrandr-capable desktops
get_mode_info() {
    local prefer="$1"
    local desktop_env=$(detect_desktop_environment)
    case "$desktop_env" in
        "kde")
            kde_get_mode_info "$prefer"
            ;;
        "gnome"|"xrandr")
            xrandr_get_mode_info "$prefer"
            ;;
        *)
            echo "Error: Unsupported desktop environment for auto-detection" >&2
            return 1
            ;;
    esac
}


#######
# Main
#######
echo "Running ScopeBuddy version: $SCB_VER"
# If SCB_NOSCOPE is set to 1 and we are not using a custom SCB_CONF
if [ "$SCB_NOSCOPE" -eq 1 ] && [ "$SCB_CONF" == "scb.conf" ]; then
    # Use noscope.conf for default values
    SCB_CONF="noscope.conf"
fi

# If steam is potentially running inside gamescope
# shellcheck disable=SC2009
if ps ax | grep -P "steam.sh -.+ -steampal" | grep -v grep || [ "$XDG_CURRENT_DESKTOP" = "gamescope" ] ; then
    # If steam is potentially running in gamemode
    # Force SCB_NOSCOPE to 1
    SCB_NOSCOPE=1
    # Set SCB_GAMEMODE to 1
    SCB_GAMEMODE=1
    # Use gamemode.conf for default values
    SCB_CONF="gamemode.conf"
fi

# Finalize SCB_CONFIGFILE
SCB_CONFIGFILE="$SCB_CONFIGDIR/$SCB_CONF"

# Split the args at -- into gamescope_opts and command
while [[ $# -gt 0 ]]; do
    if [ "${1:-}" == "--" ]; then
        shift
        # Add remaining args as individually double quoted args (should stop double quoting being a requirement)
        while [[ $# -gt 0 ]]; do
            # command variable has to be formated like this otherwise the %command% will not launch
            # shellcheck disable=SC2089
            command+=" \"$1\""
            shift
        done
        
        # Exit loop when done
        break
    fi
    # Add arg to gamescope_opts and go to next loop
    gamescope_opts+=" $1"
    shift
done

# Get the STEAM_APPID from %command%
STEAM_APPID=$(echo "$command" | perl -pe 's/.+"AppId=(\d+)"\s.+/\1/')

# Load the SCB config file if it exists then apply the default args
if [ -f "$SCB_CONFIGFILE" ]; then
    # Source the config from SCB_CONF
    # shellcheck disable=SC1090
    source "$SCB_CONFIGFILE"

    # If a config exists for this games STEAM_APPID and SCB_CONF is set to scb.conf (default)
    if [ -f "$SCB_CONFIGDIR/AppID/${STEAM_APPID}.conf" ]; then
        # Source the STEAM_APPID specific config, overriding any similar values set by SCB_CONF
        # shellcheck disable=SC1090
        source "$SCB_CONFIGDIR/AppID/${STEAM_APPID}.conf"
    fi

    # If the user has supplied ANY args to gamescope, do not load the SCB_GAMESCOPE_ARGS
    if [ -z "$gamescope_opts" ]; then
        gamescope_opts=$SCB_GAMESCOPE_ARGS
    fi

    # Attempt to extract a preferred display from gamescope_opts.
    # This sed command looks for either -O or --prefer-output followed by whitespace and a non‑space value.
    PREFER_OUTPUT=$(echo "$gamescope_opts" | sed -nE 's/.*(-O|--prefer-output)[[:space:]]+([^[:space:]]+).*/\2/p')
    
    # auto_args_preflight will fail fast if the user doesn't have deps installed for their DE.
    if [ "$SCB_AUTO_RES" -eq 1 ]; then
        if auto_args_preflight; then
            # width/height are mode-specifc values
            mode_info=$(get_mode_info "$PREFER_OUTPUT")
            if [ $? -eq 0 ] && [ -n "$mode_info" ] && [ "$mode_info" != "{}" ]; then
                DISPLAY_WIDTH=$(echo "$mode_info" | jq -r '.width')
                DISPLAY_HEIGHT=$(echo "$mode_info" | jq -r '.height')
                if [ "$DISPLAY_WIDTH" != "null" ] && [ "$DISPLAY_HEIGHT" != "null" ]; then
                    gamescope_opts=$(replace_or_append_arg "$gamescope_opts" "-W[[:space:]]*[0-9]+" "-W $DISPLAY_WIDTH")
                    gamescope_opts=$(replace_or_append_arg "$gamescope_opts" "-H[[:space:]]*[0-9]+" "-H $DISPLAY_HEIGHT")
                else
                    echo "Error: Failed to get valid display resolution. Stopping execution." >&2
                    exit 1
                fi
            else
                echo "Error: Failed to get display mode information. Stopping execution." >&2
                exit 1
            fi
        else
            echo "Error: Auto-resolution preflight check failed. Stopping execution." >&2
            exit 1
        fi
    fi
    
    if [ "$SCB_AUTO_HDR" -eq 1 ]; then
        if auto_args_preflight; then
            DISPLAY_HDR_STATE=$(get_hdr_status "$PREFER_OUTPUT")
            if [[ "$DISPLAY_HDR_STATE" == "true" ]]; then
                gamescope_opts=$(verify_or_append_arg "$gamescope_opts" "--hdr-enabled")
            fi
        else
            echo "Error: Auto-HDR preflight check failed. Stopping execution." >&2
            exit 1
        fi
    fi
    
    if [ "$SCB_AUTO_VRR" -eq 1 ]; then
        if auto_args_preflight; then
            DISPLAY_VRR_STATE=$(get_vrr_status "$PREFER_OUTPUT")
            # For KDE: VRR policy 1 or 2 means enabled; For GNOME: "true" means enabled
            if [[ "$DISPLAY_VRR_STATE" == "1" || "$DISPLAY_VRR_STATE" == "2" || "$DISPLAY_VRR_STATE" == "true" ]]; then
                gamescope_opts=$(verify_or_append_arg "$gamescope_opts" "--adaptive-sync")
            fi
        else
            echo "Error: Auto-VRR preflight check failed. Stopping execution." >&2
            exit 1
        fi
    fi

else
    # Make the default config file
    if [ ! -d "$SCB_CONFIGDIR/AppID" ]; then
        mkdir -p "$SCB_CONFIGDIR/AppID"
    fi
    # TODO: this content is functionally impossible to update for existing users, so it's maybe
    # not a great place to stuff README-style content. Once the file is created they'll never get new
    # versions on subsequent scopebuddy releases.
    cat << 'EOF' > "$SCB_CONFIGFILE"
# This is the config file that let's you assign defaults for gamescope when using the scopebuddy script
# lines starting with # are ignored
# Conf files matching the games Steam AppID stored in ~/.conf/scopebuddy/AppID/ will be sourced after
# ~/.config/scopebuddy/scb.conf or whichever file you specify with SCB_CONF=someotherfile.conf env var in the launch options.
# 
# Example for always exporting specific environment variables for gamescope
#export XKB_DEFAULT_LAYOUT=no
#export MANGOHUD_CONFIG=preset=2
#
# Example for providing default gamescope arguments through scopebuddy if no arguments are given to the scopebuddy script, this does not need to be exported.
# To not use this default set of arguments, just launch scb with SCB_NOSCOPE=1 or just add any gamescope argument before the '-- %command%' then this variable will be ignored
SCB_GAMESCOPE_ARGS="-f --mangoapp --force-grab-cursor"
#
# To auto-detect display width, height, refresh, VRR and HDR states, you can use SCB_AUTO_* {RES|HDR|VRR}
# This works on KDE (using kscreen-doctor), GNOME (using xrandr and gsettings), and any desktop with xrandr support
# These vars will override any previously set values for -W and -H or append --hdr-enabled and --adaptive-sync
# automatically depending on the current settings for your active display, or the display chosen with -O /
# --prefer-output flags in gamescope.
# 
# Dependencies:
# - jq: for parsing JSON output from kscreen-doctor or xrandr

# Desktop environment specific dependencies:
# - KDE: kscreen-doctor
# - GNOME: gsettings, xrandr
# - Other desktops (resolution only): xrandr
#SCB_AUTO_RES=1
#SCB_AUTO_HDR=1
#SCB_AUTO_VRR=1
# To debug scopebuddy output, uncomment the following line. After launching games, the executed cmd will be output to ~/.config/scopebuddy/scopebuddy.log
#SCB_DEBUG=1
###
## FOR ADVANCED USE INSIDE AN APPID CONFIG
###
# The config files are treated as a bash script by scopebuddy, this means you can use bash to do simple tasks before the game runs
# or you can check which mode scopebuddy is running in and apply settings accordingly, below are some handy variables for scripting.
# $SCB_NOSCOPE will be set to 1 if we are running in no gamescope mode
# $SCB_GAMEMODE will be set to 1 if we are running inside steam gamemode (which means SCB_NOSCOPE will also be set to 1 due to nested gamescope not working in gamemode)
# $command will contain everything steam expanded %command% into
EOF
fi


pre_command() {
  if [[ -n "$SCB_PRE_COMMAND" ]]; then
    echo "Executing pre-command: $SCB_PRE_COMMAND"
    eval "$SCB_PRE_COMMAND" || echo "Warning: SCB_PRE_COMMAND failed!"
  fi
}

post_command() {
  if [[ -n "$SCB_POST_COMMAND" ]]; then
    echo "Executing post-command: $SCB_POST_COMMAND"
    eval "$SCB_POST_COMMAND"
  fi
}

# Bind post_command to exit signal
trap post_command EXIT

# If SCB_NOSCOPE is set to 1
if [ "$SCB_NOSCOPE" -eq 1 ]; then
    # If we are potentially in gamemode
    if [ "$SCB_GAMEMODE" -eq 1 ]; then
        # Force MANGOHUD=0
        export MANGOHUD=0
    fi
    # Launch %command% without gamescope
    eval "$command"
else
    # Transfer LD_PRELOAD before we unset it
    LD_PRELOAD_REAL=$LD_PRELOAD

    # Unset LD_PRELOAD for gamescope (as it breaks the overlay) then start gamescope with LD_PRELOAD set for %command% instead
    LOGLINE="Launching: env -u LD_PRELOAD $GAMESCOPE_BIN $gamescope_opts -- env LD_PRELOAD=$LD_PRELOAD_REAL $command"
    echo "$LOGLINE"
    if [ "$SCB_DEBUG" -eq 1 ]; then
        SCB_LOGFILE="$SCB_CONFIGDIR/scopebuddy.log"
        echo -e "$LOGLINE" > "$SCB_LOGFILE"
    fi
    # run pre_command before gamescope gets exec'd. will proceed even if pre_command fails.
    pre_command
    eval "env -u LD_PRELOAD $GAMESCOPE_BIN $gamescope_opts -- env LD_PRELOAD=$LD_PRELOAD_REAL $command"
fi
